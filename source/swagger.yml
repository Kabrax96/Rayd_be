# swagger config
openapi: 3.0.0

info:
  title: RAYD API
  version: 0.1.0
  description: The Ride Sharing API enables users to manage ride sharing activities, including user registration, car details, ride creation, and passenger management. It provides endpoints to interact with users, cars, rides, and statuses. With this API, users can easily create, update, and delete user profiles, cars, and rides, as well as track ride statuses and manage passengers.

servers:
  - url: "/api"

# Table Schemas

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        is_driver:
          type: boolean
        id_car:
          type: integer
        email:
          type: string
        password:
          type: string
        phone:
          type: string
    Car:
      type: object
      properties:
        id:
          type: integer
        brand:
          type: string
        model:
          type: string
        year:
          type: integer
        plate:
          type: string
    Ride:
      type: object
      properties:
        id:
          type: integer
        driver_id:
          type: integer
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        pickup:
          type: string
        drop_off:
          type: string
        seats:
          type: integer
        status_id:
          type: integer
        route_id:
          type: integer
    Passenger:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        ride_id:
          type: integer

# Endpoints

paths:

# ------------------ USERS ----------------------

  /users:
    get:
      summary: Retrieve all users
      operationId: "db.users_helper.read_all_users"
      responses:
        '200':
          description: OK
    post:
      summary: Create a new user
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Created
  /users/{user_id}:
    get:
      summary: Retrieve a specific user
      operationId: getUser
      parameters:
        - name: user_id
          in: path
          description: ID of the user to retrieve
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '404':
          description: User not found
    put:
      summary: Update a specific user
      operationId: updateUser
      parameters:
        - name: user_id
          in: path
          description: ID of the user to update
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
        '404':
          description: User not found
    delete:
      summary: Delete a specific user
      operationId: deleteUser
      parameters:
        - name: user_id
          in: path
          description: ID of the user to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '404':
          description: User not found

# ---------------- CARS -------------------

  /cars:
    get:
      summary: Retrieve all cars
      operationId: getCars
      responses:
        '200':
          description: OK
    post:
      summary: Create a new car
      operationId: createCar
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
      responses:
        '201':
          description: Created
  /cars/{car_id}:
    get:
      summary: Retrieve a specific car
      operationId: getCar
      parameters:
        - name: car_id
          in: path
          description: ID of the car to retrieve
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '404':
          description: Car not found
    put:
      summary: Update a specific car
      operationId: updateCar
      parameters:
        - name: car_id
          in: path
          description: ID of the car to update
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
      responses:
        '200':
          description: OK
        '404':
          description: Car not found
    delete:
      summary: Delete a specific car
      operationId: deleteCar
      parameters:
        - name: car_id
          in: path
          description: ID of the car to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '404':
          description: Car not found

# ------------------ RAYDS ---------------------

  /rides:
    get:
      summary: Retrieve all rides
      operationId: getRides
      responses:
        '200':
          description: OK
    post:
      summary: Create a new ride
      operationId: createRide
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ride'
      responses:
        '201':
          description: Created
  /rides/{ride_id}:
    get:
      summary: Retrieve a specific ride
      operationId: getRide
      parameters:
        - name: ride_id
          in: path
          description: ID of the ride to retrieve
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '404':
          description: Ride not found
    put:
      summary: Update a specific ride
      operationId: updateRide
      parameters:
        - name: ride_id
          in: path
          description: ID of the ride to update
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ride'
      responses:
        '200':
          description: OK
        '404':
          description: Ride not found
    delete:
      summary: Delete a specific ride
      operationId: deleteRide
      parameters:
        - name: ride_id
          in: path
          description: ID of the ride to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '404':
          description: Ride not found

# ------------------ RAYD PASSENGERS ----------------------

  /rides/{ride_id}/passengers:
    get:
      summary: Retrieve passengers for a ride
      operationId: getPassengers
      parameters:
        - name: ride_id
          in: path
          description: ID of the ride to retrieve passengers for
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
    post:
      summary: Add a passenger to a ride
      operationId: addPassenger
      parameters:
        - name: ride_id
          in: path
          description: ID of the ride to add a passenger to
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Passenger'
      responses:
        '201':
          description: Created
  /rides/{ride_id}/passengers/{passenger_id}:
    delete:
      summary: Remove a passenger from a ride
      operationId: removePassenger
      parameters:
        - name: ride_id
          in: path
          description: ID of the ride to remove a passenger from
          required: true
          schema:
            type: integer
        - name: passenger_id
          in: path
          description: ID of the passenger to remove
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '404':
          description: Passenger or ride not found


# ------------------ STATUS ----------------------


  /statuses:
    get:
      summary: Retrieve all statuses
      operationId: getStatuses
      responses:
        '200':
          description: OK
  /statuses/{status_id}:
    get:
      summary: Retrieve a specific status
      operationId: getStatus
      parameters:
        - name: status_id
          in: path
          description: ID of the status to retrieve
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '404':
          description: Status not found

# ------------------ ROUTE ----------------------

  /routes:
    get:
      summary: Retrieve all routes
      operationId: getRoutes
      responses:
        '200':
          description: OK
  /routes/{route_id}:
    get:
      summary: Retrieve a specific route
      operationId: getRoute
      parameters:
        - name: route_id
          in: path
          description: ID of the route to retrieve
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
        '404':
          description: Route not found
